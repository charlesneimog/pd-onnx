---
name: Compile PureData Object
on:
  workflow_dispatch:
    inputs:
      publish_release:
        description: Publish a GitHub Release using LIBVERSION after build
        required: false
        type: boolean
        default: false
env:
  LIBNAME: onnx
  LIBVERSION: 0.1
permissions:
  contents: write
jobs:
  macos:
    runs-on: ${{ matrix.machines }}
    strategy:
      matrix:
        precision: [32, 64]
        machines: [macos-13, macos-latest]
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive
          fetch-depth: 0
      - name: Install PureData and Deps
        run: |
          brew install pd
      - name: Build
        run: |
          cmake . -B build -DPDLIBDIR=./ -DCMAKE_BUILD_TYPE=Release
          cmake --build build --parallel
          cmake --install build
      - name: Upload ONNX Folder
        uses: actions/upload-artifact@v4
        with:
          name: ${{env.LIBNAME}}-${{env.LIBVERSION}}-${{matrix.machines}}-pd${{matrix.precision}}
          path: ${{env.LIBNAME}}
  linux-build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        arch: [amd64, aarch64, arm]
        precision: [32, 64]
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive
          fetch-depth: 1
      - name: PureData Sources
        run: |
          sudo apt update
          sudo add-apt-repository ppa:pure-data/pure-data -y
          sudo apt install puredata -y
      - name: Install aarch64 gcc
        if: matrix.arch == 'aarch64'
        run: |
          sudo apt install gcc-aarch64-linux-gnu -y
          sudo apt install g++-aarch64-linux-gnu -y
          cmake . -B build -DPD_FLOATSIZE=${{ matrix.precision }} -DCMAKE_SYSTEM_PROCESSOR=${{ matrix.arch }} -DPDLIBDIR=./ -DCMAKE_BUILD_TYPE=Release -DCMAKE_C_COMPILER=aarch64-linux-gnu-gcc -DCMAKE_CXX_COMPILER=aarch64-linux-gnu-g++
      - name: Install arm gcc
        if: matrix.arch == 'arm'
        run: |
          sudo apt install gcc-arm-linux-gnueabihf -y
          sudo apt install g++-arm-linux-gnueabihf -y
          cmake . -B build -DPD_FLOATSIZE=${{ matrix.precision }} -DCMAKE_SYSTEM_PROCESSOR=${{ matrix.arch }} -DPDLIBDIR=./ -DCMAKE_BUILD_TYPE=Release -DCMAKE_C_COMPILER=arm-linux-gnueabihf-gcc -DCMAKE_CXX_COMPILER=arm-linux-gnueabihf-g++
      - name: Configure
        if: matrix.arch == 'amd64'
        run: |
          cmake . -B build -DPD_FLOATSIZE=${{ matrix.precision }} -DCMAKE_SYSTEM_PROCESSOR=${{ matrix.arch }} -DPDLIBDIR=./ -DCMAKE_BUILD_TYPE=Release
      - name: Build Object
        run: |
          cmake --build build -- -j$(nproc)
          cmake --install build
      - name: Upload Object
        uses: actions/upload-artifact@v4
        with:
          name: ${{env.LIBNAME}}-${{env.LIBVERSION}}-linux-${{matrix.arch}}-pd${{matrix.precision}}
          path: ${{env.LIBNAME}}
  windows-build:
    runs-on: windows-latest
    strategy:
      matrix:
        compiler: [mingw]
        arch: [amd64]
        precision: [32, 64]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          submodules: recursive
          fetch-depth: 0
      - if: matrix.compiler == 'mingw'
        name: Set up Msys2
        uses: msys2/setup-msys2@v2
        with:
          msystem: mingw64
          install: make mingw-w64-x86_64-gcc mingw64/mingw-w64-x86_64-cmake
          update: false
      - name: Install winget
        uses: Cyberboss/install-winget@v1
      - name: Install PureData Float 32
        if: matrix.precision == '32'
        run: |
          winget install -e --id MillerPuckette.PureData --accept-source-agreements
      - name: Install PureData Float 64
        if: matrix.precision == '64'
        run: |
          winget install -e --id MillerPuckette.Pd64 --accept-source-agreements
      - name: Configure and build Mingw
        shell: msys2 {0}
        if: matrix.compiler == 'mingw'
        run: |
          cmake . -B build -DPD_FLOATSIZE=${{ matrix.precision }} -DCMAKE_SYSTEM_PROCESSOR=${{ matrix.arch }} -DPDLIBDIR=./ -DCMAKE_BUILD_TYPE=Release
          cmake --build build --parallel
          cmake --install build
      - name: Upload
        uses: actions/upload-artifact@v4
        with:
          name: ${{env.LIBNAME}}-windows-${{ matrix.arch }}-pd${{matrix.precision}}
          path: ${{env.LIBNAME}}
  publish-release:
    if: ${{ github.event.inputs.publish_release == 'true' }}
    needs: [macos, linux-build, windows-build]
    runs-on: ubuntu-latest
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts
      - name: Create unified onnx directory and archive
        run: |
          set -e
          TOPDIR="onnx"
          mkdir -p "$TOPDIR"

            # Resource files we only want once
          RES_FILES="model.onnx onnx-help.pd train.pd"
          echo "Collecting files from artifacts..."
          for artifact in artifacts/*; do
            [ -d "$artifact" ] || continue
            # Detect inner lib directory
            if [ -d "$artifact/${LIBNAME}" ]; then
              SRC="$artifact/${LIBNAME}"
            else
              SRC="$artifact"
            fi
            
            # Copy resource files (only first occurrence)
            for f in $RES_FILES; do
              if [ -f "$SRC/$f" ] && [ ! -f "$TOPDIR/$f" ]; then
                echo "Adding resource $f from $(basename "$artifact")"
                cp "$SRC/$f" "$TOPDIR/$f"
              fi
            done
            
            # Copy binaries (heuristic: anything starting with onnx* or shared libs likely produced)
            # Add patterns as needed (.pd_darwin, .dll, .dylib, .so)
            find "$SRC" -maxdepth 1 -type f \
              \( -name "onnx.*" -o -name "onnx-*" -o -name "*.so" -o -name "*.dll" -o -name "*.dylib" -o -name "*.pd_darwin" \) | while read bin; do
                base=$(basename "$bin")
                # Skip if it's one of the resource files
                case "$base" in
                  model.onnx|onnx-help.pd|train.pd) continue ;;
                esac
                # Overwrite duplicates of same name (or skip if you prefer)
                echo "Adding binary $base"
                cp "$bin" "$TOPDIR/$base"
              done
          done
          echo "Final contents of $TOPDIR:"
          ls -1 "$TOPDIR"
          ZIP_NAME="${LIBNAME}-${LIBVERSION}-all-platforms.zip"
          zip -r "$ZIP_NAME" "$TOPDIR"
          echo "Created archive $ZIP_NAME"
      - name: Create / Update GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: v${{ env.LIBVERSION }}
          name: ${{ env.LIBNAME }} v${{ env.LIBVERSION }}
          target_commitish: ${{ github.sha }}
          files: |
            ${{ env.LIBNAME }}-${{ env.LIBVERSION }}-all-platforms.zip
          draft: false
          prerelease: false
